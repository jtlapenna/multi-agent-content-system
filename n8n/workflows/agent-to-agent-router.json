{
  "name": "Agent-to-Agent Router",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "agent-router",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "agent-router-webhook",
      "name": "Agent Router Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "agent-router-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Parse incoming payload (from GitHub webhook or manual trigger)\nconst payload = $input.first().json;\n\n// Extract data\nitem.site_name = payload.site_name || 'brightgift';\nitem.agent_name = payload.agent_name;\nitem.blog_slug = payload.blog_slug;\nitem.topic = payload.topic || 'general';\nitem.current_phase = payload.current_phase;\n\n// Validate required fields\nif (!item.agent_name || !item.blog_slug || !item.current_phase) {\n  throw new Error('Missing required fields: agent_name, blog_slug, current_phase');\n}\n\n// Channel mapping for BrightGift\nconst siteAgentChannels = {\n  'brightgift': {\n    'SEOAgent': 'C097J4EGEN9', // #brightgift-seo-agent\n    'BlogAgent': 'C0987CMJN1E', // #brightgift-blog-agent\n    'ReviewAgent': 'C097G9YCQT0', // #brightgift-review-agent\n    'ImageAgent': 'C0973KH68EB', // #brightgift-image-agent\n    'PublishingAgent': 'C097J4WA0LD' // #brightgift-publishing-agent\n  }\n};\n\nconst siteChannels = siteAgentChannels[item.site_name];\nif (!siteChannels) {\n  throw new Error(`Site '${item.site_name}' not configured`);\n}\n\nitem.channel_id = siteChannels[item.agent_name];\nif (!item.channel_id) {\n  throw new Error(`Agent '${item.agent_name}' not configured for site '${item.site_name}'`);\n}\n\n// Repository mapping\nconst repoMapping = {\n  'brightgift': 'your-org/brightgift-content-system'\n};\n\nconst repo = repoMapping[item.site_name] || 'your-org/multi-agent-content-system';\n\n// Convert agent name to folder name\nconst agentFolder = item.agent_name.toLowerCase().replace('agent', '');\n\n// Construct Cursor command\nitem.slack_text = `@Cursor [repo=${repo}] review instructions from agents/${agentFolder}/instructions.md and then execute the following task: run ${item.agent_name} for ${item.blog_slug} topic: ${item.topic} phase: ${item.current_phase} site: ${item.site_name}`;\n\nconsole.log(`Routing ${item.agent_name} for ${item.blog_slug} to channel ${item.channel_id}`);\n\nreturn item;"
      },
      "id": "route-agent",
      "name": "Route Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://slack.com/api/chat.postMessage",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SLACK_BOT_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "channel",
              "value": "={{ $json.channel_id }}"
            },
            {
              "name": "text",
              "value": "={{ $json.slack_text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "send-to-agent-channel",
      "name": "Send to Agent Channel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"message\": \"Agent routed successfully\",\n  \"site\": \"{{ $json.site_name }}\",\n  \"agent\": \"{{ $json.agent_name }}\",\n  \"blog_slug\": \"{{ $json.blog_slug }}\",\n  \"phase\": \"{{ $json.current_phase }}\",\n  \"channel_id\": \"{{ $json.channel_id }}\",\n  \"slack_command\": \"{{ $json.slack_text }}\"\n}"
      },
      "id": "response",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 300]
    }
  ],
  "connections": {
    "Agent Router Webhook": {
      "main": [
        [
          {
            "node": "Route Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Agent": {
      "main": [
        [
          {
            "node": "Send to Agent Channel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Agent Channel": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
} 